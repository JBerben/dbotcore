/*
 * ReflectionBuddy.java
 *
 * Created on September 10, 2008, 4:41 PM
 */
package com.cherokee.utils;

import java.awt.event.*;
import java.lang.reflect.Field;

import javax.swing.*;
import javax.swing.event.*;
import javax.swing.tree.*;

/* 
 * Copyright Â© 2008  Travis Burtrum (moparisthebest)
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 * 
 * The code *may* be used under a lesser license (such as the LGPL) only with
 * express written permission from Travis Burtrum (moparisthebest)
 * 
 * @credits 'the bank' for the idea, pointing me at netbeans for a gui builder,
 *  and also some of his code was used as a reference.
 */
@SuppressWarnings("serial")
public class ReflectionBuddy extends JFrame implements TreeSelectionListener {

	private DefaultTreeModel treeModel;
	private FieldObject selectedFo;
	private Object rootObject;
	private Class<?> rootClass;

	/** Creates new form ReflectionBuddy */
	public ReflectionBuddy(final Object o) {
		rootObject = o;
		DefaultMutableTreeNode root = new DefaultMutableTreeNode();
		RuntimeViewer.getFields(rootObject, root);
		treeModel = new DefaultTreeModel(root);
		initComponents();

		JMenuItem newItem = new JMenuItem("New...");
		newItem.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				String s = JOptionPane.showInputDialog(ReflectionBuddy.this,
						"Class name", "New Static Search",
						JOptionPane.QUESTION_MESSAGE);
				if(s == null)
					return;
				try {
					System.out.println(o.getClass());
					System.out
							.println(o.getClass().getClassLoader().getClass());
					new ReflectionBuddy(o.getClass().getClassLoader()
							.loadClass(s));
				} catch(ClassNotFoundException exception) {
					exception.printStackTrace();
				}
			}
		});
		jMenu1.insert(newItem, jMenu1.getMenuComponentCount() - 1);

		setVisible(true);
	}

	public ReflectionBuddy(final Class<?> staticClass) {
		rootClass = staticClass;
		DefaultMutableTreeNode root = new DefaultMutableTreeNode();
		RuntimeViewer.getFields(staticClass, root);
		treeModel = new DefaultTreeModel(root);
		initComponents();

		JMenuItem newItem = new JMenuItem("New...");
		newItem.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				String s = JOptionPane.showInputDialog(ReflectionBuddy.this,
						"Class name", "New Static Search",
						JOptionPane.QUESTION_MESSAGE);
				if(s == null)
					return;
				try {
					new ReflectionBuddy(staticClass.getClassLoader().loadClass(
							s));
				} catch(ClassNotFoundException exception) {
					exception.printStackTrace();
				}
			}
		});
		jMenu1.insert(newItem, jMenu1.getMenuComponentCount() - 1);

		setVisible(true);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		jTree1 = new javax.swing.JTree(treeModel);
		// Set selection mode
		jTree1.getSelectionModel().setSelectionMode(
				TreeSelectionModel.SINGLE_TREE_SELECTION);
		// Listen for when the selection changes.
		jTree1.addTreeSelectionListener(this);
		jPanel1 = new javax.swing.JPanel();
		reloadItemButton = new javax.swing.JButton();
		reloadItemButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				reloadItemButtonPressed();
			}
		});
		reloadButton = new javax.swing.JButton();
		reloadButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				reloadButtonPressed();
			}
		});
		removeButton = new javax.swing.JButton();
		removeButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				removeButtonPressed();
			}
		});
		jPanel2 = new javax.swing.JPanel();
		changeButton = new javax.swing.JButton();
		changeButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				changeButtonPressed();
			}
		});
		changeField = new javax.swing.JTextField();
		jScrollPane2 = new javax.swing.JScrollPane();
		jTextArea1 = new javax.swing.JTextArea();
		renameButton = new javax.swing.JButton();
		renameButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				renameButtonPressed();
			}
		});
		renameField = new javax.swing.JTextField();
		jMenuBar1 = new javax.swing.JMenuBar();
		jMenu1 = new javax.swing.JMenu();
		loadFileMenuItem = new javax.swing.JMenuItem();
		loadFileMenuItem.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				loadFilePressed();
			}
		});
		saveFileMenuItem = new javax.swing.JMenuItem();
		saveFileMenuItem.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				saveFilePressed();
			}
		});
		exitMenuItem = new javax.swing.JMenuItem();
		exitMenuItem.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				exitPressed();
			}
		});

		setTitle("Reflection Buddy - moparisthebest");

		jTree1.setAutoscrolls(true);
		jScrollPane1.setViewportView(jTree1);

		jPanel1.setBorder(javax.swing.BorderFactory
				.createTitledBorder("Controls"));

		reloadItemButton.setText("Reload");
		reloadItemButton.setEnabled(false);

		reloadButton.setText("Reload All");

		removeButton.setText("Remove");
		removeButton.setEnabled(false);

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(
				jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout
				.setHorizontalGroup(jPanel1Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel1Layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanel1Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																reloadButton,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																140,
																Short.MAX_VALUE)
														.addComponent(
																reloadItemButton,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																140,
																Short.MAX_VALUE)
														.addComponent(
																removeButton,
																javax.swing.GroupLayout.Alignment.TRAILING,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																140,
																Short.MAX_VALUE))
										.addContainerGap()));
		jPanel1Layout
				.setVerticalGroup(jPanel1Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel1Layout
										.createSequentialGroup()
										.addComponent(reloadButton)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(reloadItemButton)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(removeButton)));

		jPanel2.setBorder(javax.swing.BorderFactory
				.createTitledBorder("Field Info"));

		changeButton.setText("Change Value");
		changeButton.setEnabled(false);

		changeField.setEditable(false);
		changeField.setToolTipText("Only String and Primitive types accepted.");

		jTextArea1.setColumns(10);
		jTextArea1.setEditable(false);
		jTextArea1.setRows(5);
		jScrollPane2.setViewportView(jTextArea1);

		renameButton.setText("Rename");
		renameButton.setEnabled(false);

		renameField.setEditable(false);
		renameField
				.setToolTipText("This should be a valid name in Java, but I won't check it.");

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(
				jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout
				.setHorizontalGroup(jPanel2Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								jPanel2Layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanel2Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.TRAILING)
														.addComponent(
																jScrollPane2,
																javax.swing.GroupLayout.Alignment.LEADING,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																140,
																Short.MAX_VALUE)
														.addComponent(
																changeField,
																javax.swing.GroupLayout.Alignment.LEADING,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																140,
																Short.MAX_VALUE)
														.addComponent(
																changeButton,
																javax.swing.GroupLayout.Alignment.LEADING,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																140,
																Short.MAX_VALUE)
														.addComponent(
																renameButton,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																140,
																Short.MAX_VALUE)
														.addComponent(
																renameField,
																javax.swing.GroupLayout.Alignment.LEADING,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																140,
																Short.MAX_VALUE))
										.addContainerGap()));
		jPanel2Layout
				.setVerticalGroup(jPanel2Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								jPanel2Layout
										.createSequentialGroup()
										.addComponent(
												jScrollPane2,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												172, Short.MAX_VALUE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												renameField,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(renameButton)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												changeField,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(changeButton)));

		jMenu1.setText("File");

		loadFileMenuItem.setText("Load Names");
		jMenu1.add(loadFileMenuItem);

		saveFileMenuItem.setText("Save Names");
		jMenu1.add(saveFileMenuItem);

		exitMenuItem.setText("Exit");
		jMenu1.add(exitMenuItem);

		jMenuBar1.add(jMenu1);

		setJMenuBar(jMenuBar1);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(jScrollPane1,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										250, Short.MAX_VALUE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(
														jPanel1,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(
														jPanel2,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		jPanel1,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		111,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(
																		jPanel2,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		Short.MAX_VALUE))
												.addComponent(
														jScrollPane1,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														425, Short.MAX_VALUE))
								.addContainerGap()));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	@Override
	public void valueChanged(TreeSelectionEvent e) {
		// Returns the last path element of the selection.
		// This method is useful only when the selection model allows a single
		// selection.
		DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1
				.getLastSelectedPathComponent();

		// Nothing is selected.
		if(node == null)
			return;

		// root is selected, do nothing
		if(node == treeModel.getRoot()) {
			displayInfo("Select a leaf node.");
			changeField.setEditable(false);
			changeButton.setEnabled(false);

			renameField.setEditable(false);
			renameButton.setEnabled(false);

			reloadItemButton.setEnabled(false);

			removeButton.setEnabled(false);
			return;
		}

		removeButton.setEnabled(true);

		if(node.getUserObject() instanceof FieldObject) {
			selectedFo = (FieldObject) node.getUserObject();
			// if(node.isLeaf()) {
			displayInfo(selectedFo.getFullString());

			changeField.setEditable(selectedFo.isMutable());
			changeButton.setEnabled(selectedFo.isMutable());

			reloadItemButton.setEnabled(true);
			renameField.setEditable(true);
			renameButton.setEnabled(true);

			// } else {
			// displayInfo("Select a leaf node.");
			// changeField.setEditable(false);
			// changeButton.setEnabled(false);
			//
			// renameField.setEditable(false);
			// renameButton.setEnabled(false);
			// }
		} else if(node.getUserObject() instanceof ArrayObject) {
			ArrayObject ao = (ArrayObject) node.getUserObject();
			displayInfo("Source: " + ao.getSource() + "\nParent: "
					+ ao.getArray() + "\nValue: " + ao.getObject());
			changeField.setEditable(false);
			changeButton.setEnabled(false);

			reloadItemButton.setEnabled(true);
			renameField.setEditable(false);
			renameButton.setEnabled(false);
		} else {
			displayInfo("Select a leaf node.");
			changeField.setEditable(false);
			changeButton.setEnabled(false);

			reloadItemButton.setEnabled(false);
			renameField.setEditable(false);
			renameButton.setEnabled(false);
		}
	}

	private void displayInfo(String s) {
		jTextArea1.setText(s);
	}

	private void exitPressed() {
		dispose();
	}

	private void loadFilePressed() {
		JFileChooser chooser = new JFileChooser();
		chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		chooser.setDialogType(JFileChooser.OPEN_DIALOG);
		chooser.setDialogTitle("Choose file to open.");
		if(chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
			FieldObject.loadAltNames(chooser.getSelectedFile());
		jTree1.repaint();
	}

	private void saveFilePressed() {
		JFileChooser chooser = new JFileChooser();
		chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		chooser.setDialogType(JFileChooser.SAVE_DIALOG);
		chooser.setDialogTitle("Choose file to save.");
		if(chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
			FieldObject.saveAltNames(chooser.getSelectedFile());
	}

	private void reloadItemButtonPressed() {
		DefaultMutableTreeNode branch = (DefaultMutableTreeNode) jTree1
				.getLastSelectedPathComponent();

		// Nothing is selected.
		if(branch == null || branch.getUserObject() == null)
			return;
		Object userObject = branch.getUserObject();
		if(userObject == null)
			return;

		int maxDepth = 3;

		if(userObject instanceof FieldObject) {
			if(maxDepth == 0)
				return;
			branch.removeAllChildren();
			FieldObject fo = (FieldObject) userObject;
			Field f = fo.getField();
			Object value = fo.getValue();
			if(f.getType().isPrimitive()
					|| (f.getType().getPackage() != null && f.getType()
							.getPackage().getImplementationVendor() != null)) {
				// if its another type, recurse on it to display it's values
			} else if(f.getType().isArray() && value != null) {
				RuntimeViewer.getFieldsFromArray(f, fo, value, branch,
						maxDepth - 1);
			} else {
				Class<?> superclass = f.getType().getSuperclass();
				if(!(superclass.isPrimitive() || superclass.isArray() || (superclass
						.getPackage() != null && superclass.getPackage()
						.getImplementationVendor() != null))) {
					DefaultMutableTreeNode node = new DefaultMutableTreeNode(
							"*Superclass " + superclass.getName());
					branch.add(node);
					RuntimeViewer.getFields(f.getName(), superclass, value,
							node, Math.min(maxDepth - 1, 1));
				}
				RuntimeViewer.getFields(f.getName(), f.getType(), value,
						branch, maxDepth - 1);
			}
		} else if(userObject instanceof ArrayObject) {
			ArrayObject ao = (ArrayObject) userObject;
			FieldObject source = ao.getSource();
			Field f = source.getField();
			Object object = ao.getObject();
			System.out.println("Reloading ArrayObject from field "
					+ ao.getArray().toString() + " "
					+ f.getDeclaringClass().getName() + "." + f.getName()
					+ " of type " + object.getClass() + " with superclass "
					+ object.getClass().getSuperclass() + " of value " + object
					+ " at depth " + (maxDepth - 1));
			if(maxDepth == 0)
				return;
			branch.removeAllChildren();
			if(object.getClass().isPrimitive()
					|| (object.getClass().getPackage() != null && object
							.getClass().getPackage().getImplementationVendor() != null)) {
				// if its another type, recurse on it to display it's values
			} else if(object.getClass().isArray()) {
				RuntimeViewer.getFieldsFromArray(f, source, object, branch,
						maxDepth - 1);
			} else {
				Class<?> superclass = object.getClass().getSuperclass();
				if(!(superclass.isPrimitive() || superclass.isArray() || (superclass
						.getPackage() != null && superclass.getPackage()
						.getImplementationVendor() != null))) {
					DefaultMutableTreeNode node = new DefaultMutableTreeNode(
							"*Superclass " + superclass.getName());
					branch.add(node);
					RuntimeViewer.getFields(f.getName(), superclass, object,
							node, 1);
				}
				RuntimeViewer.getFields(f.getName(), object.getClass(), object,
						branch, maxDepth - 1);
			}
		}
		jTree1.setModel(new DefaultTreeModel((DefaultMutableTreeNode) jTree1
				.getModel().getRoot()));
		jTree1.setSelectionPath(new TreePath(branch));
	}

	private void reloadButtonPressed() {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode();
		if(rootObject != null)
			RuntimeViewer.getFields(rootObject, root);
		else
			RuntimeViewer.getFields(rootClass, root);
		treeModel = new DefaultTreeModel(root);

		jTree1.setModel(treeModel);
	}

	private void removeButtonPressed() {
		DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1
				.getLastSelectedPathComponent();
		if(node == null)
			return;
		treeModel.removeNodeFromParent(node);

		jTextArea1.setText("");
	}

	private void renameButtonPressed() {
		selectedFo.setAltName(renameField.getText());
		displayInfo(selectedFo.getFullString());
		jTree1.repaint();
	}

	private void changeButtonPressed() {
		selectedFo.setValue(changeField.getText());
		displayInfo(selectedFo.getFullString());
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton reloadItemButton;
	private javax.swing.JButton changeButton;
	private javax.swing.JTextField changeField;
	private javax.swing.JMenuItem exitMenuItem;
	private javax.swing.JMenu jMenu1;
	private javax.swing.JMenuBar jMenuBar1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JTextArea jTextArea1;
	private javax.swing.JTree jTree1;
	private javax.swing.JMenuItem loadFileMenuItem;
	private javax.swing.JButton reloadButton;
	private javax.swing.JButton removeButton;
	private javax.swing.JButton renameButton;
	private javax.swing.JTextField renameField;
	private javax.swing.JMenuItem saveFileMenuItem;
	// End of variables declaration//GEN-END:variables

}
